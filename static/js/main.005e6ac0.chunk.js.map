{"version":3,"sources":["components/BootstrapFormComponent.js","App.js","serviceWorker.js","index.js"],"names":["BootstrapForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","submitEmail","bind","assertThisInitialized","options","encoding","method","uri","headers","Content-Type","form","xnQsjsdp","zc_gad","xmIwtLD","actionType","returnURL","Company","Last Name","Email","console","log","concat","JSON","stringify","rp","then","response","catch","err","react_default","a","createElement","onSubmit","className","htmlFor","type","id","placeholder","Component","App","BootstrapFormComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8XAkEeA,cA9Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAETR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IALFA,6EASjB,IAAMY,EAAU,CACdC,SAAU,QACVC,OAAQ,OACRC,IAAK,yCACLC,QAAS,CACPC,eAAgB,yBAElBC,KAAM,CACJC,SACE,mEACFC,OAAQ,GACRC,QACE,mEACFC,WAAY,WACZC,UAAW,4CACXC,QAAS,kBACTC,YAAa,eACbC,MAAOvB,KAAKI,MAAMC,QAItB,OADAmB,QAAQC,IAAR,oBAAAC,OAAgCC,KAAKC,UAAUnB,KACxCoB,IAAGpB,GACPqB,KAAK,SAACC,GACLP,QAAQC,IAAI,0BACZD,QAAQC,IAAR,gBAAAC,OAA4BC,KAAKC,UAAUG,OAE5CC,MAAM,SAACC,GAAD,OAAST,QAAQC,IAAIQ,sCAI9B,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUrC,KAAKM,aACnB4B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,kBAAkBD,UAAU,WAA3C,SAGAJ,EAAAC,EAAAC,cAAA,SACEI,KAAK,QACLF,UAAU,eACVG,GAAG,kBACHC,YAAY,gDAEdR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAeE,KAAK,UAAtC,oBArDgBG,aCmBbC,MAnBf,WACE,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAd,mBACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QAAb,kEAMJJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACS,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAC6B,GAClCA,EAAaC","file":"static/js/main.005e6ac0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport rp from 'request-promise';\n\nclass BootstrapForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: ''\n    };\n    this.submitEmail = this.submitEmail.bind(this);\n  }\n\n  submitEmail() {\n    const options = {\n      encoding: 'UTF-8',\n      method: 'POST',\n      uri: 'https://crm.zoho.com/crm/WebToLeadForm',\n      headers: {\n        'Content-Type': 'x-www-form-urlencoded'\n      },\n      form: {\n        xnQsjsdp:\n          '6894d049cf0933024c1dbe585181e58e70b9a23da40771969ba1745ae7c8f1fd',\n        zc_gad: '',\n        xmIwtLD:\n          '41fe22b1c8549ef266e82589846ecb9cf957a70ecda827906e23352f7d4e41fc',\n        actionType: 'TGVhZHM=',\n        returnURL: 'https://mstreet3.github.io/collect-emails',\n        Company: 'PreLaunchSignUp',\n        'Last Name': 'web2LeadForm',\n        Email: this.state.email\n      }\n    };\n    console.log(`the options are: ${JSON.stringify(options)}`);\n    return rp(options)\n      .then((response) => {\n        console.log('Response went through!');\n        console.log(`Response is: ${JSON.stringify(response)}`);\n      })\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submitEmail}>\n        <div className=\"input-group mb-3\">\n          <label htmlFor=\"subscriberEmail\" className=\"sr-only\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            id=\"subscriberEmail\"\n            placeholder=\"Enter your email for updates on the launch.\"\n          />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-dark\" type=\"button\">\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default BootstrapForm;\n","import React from 'react';\nimport BootstrapForm from './components/BootstrapFormComponent';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Email Collector</h1>\n          <p className=\"lead\">\n            This is an app to collect emails and store them in Zoho CRM.\n          </p>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <BootstrapForm />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}